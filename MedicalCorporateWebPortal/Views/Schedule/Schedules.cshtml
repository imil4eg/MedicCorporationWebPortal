@using MedicalCorporateWebPortal.Models;
@using System.Globalization;
@model Tuple<Doctor, IEnumerable<DateOfAppointment>, IEnumerable<ReservedTime>, ServiceListViewModel, User>

<div>
    <div>
        <div class="inline">
            <img src="~/images/default-user-image.png" alt="avatar" width="100" height="75" />
        </div>
        <div class="inline">
            <h1>@string.Format("{0} {1}", Model.Item5.LastName, Model.Item5.FirstName)</h1>
            <b>@Model.Item1.Speciality</b>
        </div>
    </div>
</div>
@using (Html.BeginForm("Doctors", "RecordConfirmation", FormMethod.Post))
{
    <div>
        <h2>Расписание</h2>
        <div class="schedule-header">
            @string.Format("{0} {1} - {2} {3} {4}", DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek + (int)DayOfWeek.Monday).Day, DateTime.Today.ToString("MMMM"), DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek + (int)DayOfWeek.Friday).Day, DateTime.Today.ToString("MMMM"), DateTime.Today.Year)
        </div>
        @{
            DateTime startOfWeekDate = DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek + (int)DayOfWeek.Monday).Date;
            string[] shortDates = DateTimeFormatInfo.CurrentInfo.ShortestDayNames;
            for (int i = 1; i < 5 + 1; i++, startOfWeekDate = startOfWeekDate.AddDays(1))
            {
            <div class="schedule-day-header">
                @string.Format("{0}, {1}", shortDates[i], startOfWeekDate.Day)
            </div>

            }
        }
        <div class="change-service">
            <span class="steps-breadcrumb-name col-md-2">Услуга</span>
            <div class="service-select">
                @Html.DropDownListFor(model => model.Item4.SelectedServiceID, Model.Item4.ServiceItems, new { @class = "form-control" })
            </div>
        </div>
        <div class="schedule-week">
            @{
                DateTime currentDay = DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek + (int)DayOfWeek.Monday);
                DateTime endOfDay = DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek + (int)DayOfWeek.Friday);
                string periodOfWorking = string.Empty;
                int dateId = 0;
                for (int i = 0;i < 5; i++)
                {
                    bool found = false;
                    foreach (var date in Model.Item2)
                    {
                        if(currentDay.Day == date.Date.Day)
                        {
                            periodOfWorking = date.PeriodOfWorking;
                            dateId = date.DateOfAppointmentID;
                            found = true;
                            break;
                        }
                    }

                    if (found)
                    {
                        int[] r = Array.ConvertAll(periodOfWorking.Split('-'), int.Parse);
                        DateTime currentTime = DateTime.Today;
                        currentTime = currentTime.AddHours(r[0]);
                        <div class="schedule-day">
                            @{
                                for (; currentTime.Hour < r[1]; currentTime = currentTime.AddMinutes(30))
                                {
                                    bool reserved = false;
                                    foreach (var reservedTime in Model.Item3.Where(t => t.DateOfAppointmentID == dateId))
                                    {
                                        if (reservedTime.Time.Hour == currentTime.Hour)
                                        {
                                            <input type="button" class="btn btn-group-vertical btn-primary btn-lg" value="@currentTime.ToString("HH:mm")" disabled="disabled" onclick="" />
                                            reserved = true;
                                            break;
                                        }
                                    }
                                
                                    <input type="submit" class="btn btn-group-vertical btn-primary btn-lg" value="@currentTime.ToString("HH:mm")" onclick="@("window.location.href='" + Url.Action("RecordConfirmation","Record", new { @doctorId = Model.Item1.ID, @date = currentTime }) + "'");" />
                                    @*if (reserved)
                                    {
                                        continue;
                                    }
                                
                                    if(currentDay.Day < DateTime.Today.Day)
                                    {
                                        <input type="button" class="btn btn-group-vertical btn-primary btn-lg" value="@currentTime.ToString("HH:mm")" disabled="disabled" />
                                    }
                                    else
                                    {
                                        <input type="submit" class="btn btn-group-vertical btn-primary btn-lg" value="@currentTime.ToString("HH:mm")" onclick="@("window.location.href='" + Url.Action("RecordConfirmation","Record", new { @doctorId = Model.Item1.ID, @date = currentTime }) + "'");" />
                                    }*@
                                }
                                currentDay = currentDay.AddDays(1);
                                
                            }
                        </div>
                    }
                    else
                    {
                        <div class="schedule-day">
                            В этот день приема нет.
                        </div>
                    }
                }  
            }
        </div>
   </div>
}


