@using System.Globalization;
@model MedicalCorporateWebPortal.Models.DoctorViewModel  

<div class="info_main_block">
    <div class="emp_info_box">
        <ul class="emp_info_spec">
            <li><img class="doc_img" src="~/images/default-user-image.png" alt="avatar" width="100%" height="100%" /></li>
            <li class="name">@string.Format("{0} {1}", Model.User.LastName, Model.User.FirstName)</li>
            <li class="spec">@Model.SpecialtyName</li>
        </ul>
    </div>
</div>
<hr />
@using (Html.BeginForm("RecordConfirmation", "Schedule", FormMethod.Post, new { id = "postForm", @class = "info_main_block" }))
{
    @Html.HiddenFor(model => model.User.UserName)
    @Html.HiddenFor(model => model.Doctor.ID)

    <div style="width:100%;height:100%">
        <div class="emp_info_box" style="width:100%;height:100%">
                    <p class="info_top">Расписание</p>
        <div class="schedule-header">
            @string.Format("{0} {1} - {2} {3} {4}", DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek + (int)DayOfWeek.Monday).Day, DateTime.Today.ToString("MMMM"), DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek + (int)DayOfWeek.Friday).Day, DateTime.Today.ToString("MMMM"), DateTime.Today.Year)
        </div>
        @{
            DateTime startOfWeekDate = DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek + (int)DayOfWeek.Monday).Date;
            string[] shortDates = DateTimeFormatInfo.CurrentInfo.ShortestDayNames;
            for (int i = 1; i < 5 + 1; i++, startOfWeekDate = startOfWeekDate.AddDays(1))
            {
            <div class="schedule-day-header">
                @string.Format("{0}, {1}", shortDates[i], startOfWeekDate.Day)
            </div>

            }
        }
        <div class="change-service">
            <span class="steps-breadcrumb-name col-md-2">Услуга</span>
            <div class="service-select">
                @Html.DropDownListFor(model => model.SelectedService, new SelectList(Model.Services, "ServiceID", "Name"), new { @class = "form-control" })
            </div>
        </div>
        <div class="schedule-week">
            @{
                DateTime currentDay = DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek + (int)DayOfWeek.Monday);
                DateTime endOfDay = DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek + (int)DayOfWeek.Friday);
                DateTime actualDate = DateTime.Today;
                string periodOfWorking = string.Empty;
                int dateId = 0;
                for (int i = 0;i < 5; i++)
                {
                    bool found = false;
                    foreach (var date in Model.DatesOfAppointment)
                    {
                        if(currentDay.Day == date.Date.Day)
                        {
                            actualDate = date.Date;
                            periodOfWorking = date.PeriodOfWorking;
                            dateId = date.DateOfAppointmentID;
                            found = true;
                            break;
                        }
                    }

                    if (found)
                    {
                        int[] r = Array.ConvertAll(periodOfWorking.Split('-'), int.Parse);
                        DateTime currentTime = actualDate.Date;
                        currentTime = currentTime.AddHours(r[0]);
                        <input type="hidden"  name="selectedTime" id="selectedTime" value="@currentTime" /> 
                        <div class="schedule-day">
                            @{
                                var reservedTimes = Model.ReservedTimes.Where(t => t.DateOfAppointmentID == dateId);
                                for (; currentTime.Hour < r[1]; currentTime = currentTime.AddMinutes(30))
                                {
                                    bool reserved = false;
                                    
                                    if (reservedTimes.Any(time => time.Time.TimeOfDay == currentTime.TimeOfDay))
                                    {
                                        <input type="button" class="btn btn-group-vertical btn-primary btn-lg" value="@currentTime.ToString("HH:mm")" disabled="disabled" onclick="" />
                                        reserved = true;
                                    }
                                    
                                
                                    if (reserved)
                                    {
                                        continue;
                                    }
                                    
                                    if(currentDay.Day <= DateTime.Today.Day || currentDay.Month < DateTime.Today.Month)
                                    {
                                        <input type="button" class="btn btn-group-vertical btn-primary btn-lg" value="@currentTime.ToString("HH:mm")" disabled="disabled" />
                                    }
                                    else
                                    {
                                        <input id="@currentTime" name="timeButton" type="button" class="btn btn-group-vertical btn-primary btn-lg" value="@currentTime.ToString("HH:mm")" onclick="reply_click(this.id);" />
                                    }
                                }
                                
                            }
                        </div>
                    }
                    else
                    {
                        <div class="schedule-day">
                            В этот день приема нет.
                        </div>
                    }
                    currentDay = currentDay.AddDays(1);
                }  
            }
        </div>
        </div>
   </div>
}

<script type="text/javascript">
    function reply_click(clicked_id) {
        document.getElementById('selectedTime').value = clicked_id;
        document.getElementById('postForm').submit();
    };
</script>


